# import numpy as np

# _DUVANANT = {
#     1: [(1, 1, 1/3, 1/3, 1/3),],
#     2: [(3, 1/3, 2/3, 1/6, 1/6),],
#     3: [(1, -0.562500000000000, 1/3, 1/3, 1/3),
#         (3, 0.520833333333333, 0.6, 0.2, 0.2)],
#     4: [(3, 0.223381589678011, 0.108103018168070, 0.445948490915965,0.445948490915965),
#         (3, 0.109951743655322, 0.816847572980459, 0.091576213509771, 0.091576213509771)],
#     5: [(1, 0.225000000000000, 0.333333333333333, 0.333333333333333, 0.333333333333333),
#         (3, 0.132394152788506, 0.059715871789770, 0.470142064105115, 0.470142064105115),
#         (3, 0.125939180544827, 0.797426985353087, 0.101286507323456, 0.101286507323456),],
#     6: [(3, 0.116786275726379, 0.501426509658179, 0.249286745170910, 0.249286745170910),
#         (3, 0.050844906370207, 0.873821971016996, 0.063089014491502, 0.063089014491502),
#         (6, 0.082851075618374, 0.053145049844817, 0.310352451033784, 0.636502499121399)],
#     7: [(1, -0.149570044467682, 0.333333333333333, 0.333333333333333, 0.333333333333333),
#         (3, 0.175615257433208, 0.479308067841920, 0.260345966079040, 0.260345966079040),
#         (3, 0.053347235608838, 0.869739794195568, 0.065130102902216, 0.065130102902216),
#         (6, 0.077113760890257, 0.048690315425316, 0.312865496004874, 0.638444188569810)],
#     8: [(1, 0.144315607677787, 0.333333333333333, 0.333333333333333, 0.333333333333333),
#         (3, 0.095091634267285, 0.081414823414554, 0.459292588292723, 0.459292588292723),
#         (3, 0.103217370534718, 0.658861384496480, 0.170569307751760, 0.170569307751760),
#         (3, 0.032458497623198, 0.898905543365938, 0.050547228317031, 0.050547228317031),
#         (6, 0.027230314174435, 0.008394777409958, 0.263112829634638, 0.728492392955404)],
#     9: [(1, 0.097135796282799, 0.333333333333333, 0.333333333333333, 0.333333333333333),
#         (3, 0.031334700227139, 0.020634961602525, 0.489682519198738, 0.489682519198738),
#         (3, 0.077827541004774, 0.125820817014127, 0.437089591492937, 0.437089591492937),
#         (3, 0.079647738927210, 0.623592928761935, 0.188203535619033, 0.188203535619033),
#         (3, 0.025577675658698, 0.910540973211095, 0.044729513394453, 0.044729513394453),
#         (6, 0.043283539377289, 0.036838412054736, 0.221962989160766, 0.741198598784498)],
#     10: [(1, 0.090817990382754, 0.333333333333333, 0.333333333333333, 0.333333333333333),
#          (3, 0.036725957756467, 0.028844733232685, 0.485577633383657, 0.485577633383657),
#          (3, 0.045321059435528, 0.781036849029926, 0.109481575485037, 0.109481575485037),
#          (6, 0.072757916845420, 0.141707219414880, 0.307939838764121, 0.550352941820999),
#          (6, 0.028327242531057, 0.025003534762686, 0.246672560639903, 0.728323904597411),
#          (6, 0.009421666963733, 0.009540815400299, 0.066803251012200, 0.923655933587500)]
# }

# def duvanant_points(p: int) -> np.ndarray:
#     """
#     Returns the duvanant quadrature triangle sample points W, L1, L2, L3, coordinates for a given order p.

#     Parameters
#     ----------
#     p : int
#         The order of the quadrature rule.
#     Returns
#     -------
#     pts : np.ndarray
#         The sample points W, L1, L2, L3.
#     -------

#     P = dunavant_points(p)
#     P[0,:] = Weights
#     P[1,:] = L1 values
#     P[2,:] = L2 values
#     P[3,:] = L3 values
#     """

#     Pts = []
#     for N, W, L1, L2, L3 in _DUVANANT[p]:
#         l1, l2, l3 = L1, L2, L3
#         for n in range(N):
#             if n==3:
#                 l1, l2, l3 = L1, L3, L2
            
#             Pts.append([W,l1, l2, l3])
#             l1, l2, l3 = l2, l3, l1
#     pts = np.array(Pts).T
#     return pts